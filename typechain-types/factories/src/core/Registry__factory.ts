/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Registry, RegistryInterface } from "../../../src/core/Registry";

const _abi = [
  {
    inputs: [],
    name: "ContractAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ContractDoesNotImplementITradeInterface",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "ContractRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contractCreator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "creatorContracts",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "getContractCreator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "getCreatorContracts",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523460195760405161068861001f823961068890f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80635e1970f114610062578063aa6773541461005d578063cc74499314610058578063d264e453146100535763d571770c03610088576102e3565b6102a7565b61021b565b61010c565b6100b0565b6001600160a01b031690565b90565b6001600160a01b0381165b0361008857565b600080fd5b9050359061009a82610076565b565b90602082820312610088576100739161008d565b34610088576100e56100cb6100c636600461009c565b610311565b604051918291826001600160a01b03909116815260200190565b0390f35b919060408382031261008857610073906020610105828661008d565b940161008d565b346100885761012561011f3660046100e9565b9061045f565b604051005b80610081565b9050359061009a8261012a565b919060408382031261008857610073906020610159828661008d565b9401610130565b61007390610067906001600160a01b031682565b61007390610160565b61007390610174565b906101909061017d565b600052602052604060002090565b634e487b7160e01b600052603260045260246000fd5b80548210156101d7576101ce600191600052602060002090565b91020190600090565b61019e565b610073916008021c610067565b9061007391546101dc565b6101ff906000610186565b80548210156100885761007391610215916101b4565b906101e9565b34610088576100e56100cb61023136600461013d565b906101f4565b90610257610250610246845190565b8084529260200190565b9260200190565b9060005b8181106102685750505090565b90919261028e61028760019286516001600160a01b0316815260200190565b9460200190565b92910161025b565b602080825261007392910190610237565b34610088576100e56102c26102bd36600461009c565b610636565b60405191829182610296565b60006102de610073926001610186565b6101e9565b34610088576100e56100cb6102f936600461009c565b6102ce565b61007390610067565b61007390546102fe565b61032861007391610320600090565b506001610186565b610307565b6100676100736100739290565b6100739061032d565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761037b57604052565b610343565b801515610081565b9050519061009a82610380565b906020828203126100885761007391610388565b6040513d6000823e3d90fd5b916001600160a01b0360089290920291821b911b5b9181191691161790565b91906103e56100736103ed9361017d565b9083546103b5565b9055565b908154916801000000000000000083101561037b578261041991600161009a950181556101b4565b906103d4565b906001600160a01b03906103ca565b9061043e6100736103ed9261017d565b825461041f565b6001600160a01b0391821681529116602082015260400190565b919061046f610328826001610186565b9260009361048f6104826100678761033a565b916001600160a01b031690565b03610592576104a56104a08361017d565b61017d565b60206104b060405190565b6301ffc9a760e01b8152632fa757f360e01b600482015291829060249082905afa801561058d576104e79160009161056057501590565b610551576105238261051e610073847f768fb430a0d4b201cb764ab221c316dd14d8babf2e4b2348e05964c6565318b69798610186565b6103f1565b61053781610532846001610186565b61042e565b61054c61054360405190565b92839283610445565b0390a1565b63f8025b1b60e01b8452600484fd5b610582915060203d602011610586575b61057a8183610359565b810190610395565b1590565b503d610570565b6103a9565b6370bc3e8560e01b8452600484fd5b906105bc6105b0610246845490565b92600052602060002090565b9060005b8181106105cd5750505090565b9091926105fa6105f36001926105e287610307565b6001600160a01b0316815260200190565b9460010190565b9291016105c0565b90610073916105a1565b9061009a6106269261061d60405190565b93848092610602565b0383610359565b6100739061060c565b61064d61007391610645606090565b506000610186565b61062d56fea264697066735822122041d8f72f73c24a5b3373ae97ebf413b462ebad32a4e2e3f41040e1193253302664736f6c634300081c0033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Registry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Registry__factory {
    return super.connect(runner) as Registry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new Interface(_abi) as RegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Registry {
    return new Contract(address, _abi, runner) as unknown as Registry;
  }
}
