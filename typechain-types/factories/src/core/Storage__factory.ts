/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { Storage, StorageInterface } from "../../../src/core/Storage";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_creatorFeePercent",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "availableTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creatorFeePercent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllAvailableTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getAvailableTokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAvailableTokensCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
    ],
    name: "getAvailableTokensPaginated",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_creator",
        type: "address",
      },
    ],
    name: "setCreator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    name: "setDescription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokenIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523461002b5761001a6100146100bb565b9161016e565b604051610cf161019b8239610cf190f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006757604052565b610030565b9061008061007960405190565b9283610046565b565b90505190565b909160608284031261002b576100b86100a18484610082565b9360406100b18260208701610082565b9401610082565b90565b6100d9610e8c803803806100ce8161006c565b928339810190610088565b909192565b90600019905b9181191691161790565b6100b86100b86100b89290565b9061010b6100b8610112926100ee565b82546100de565b9055565b906001600160a01b03906100e4565b6100b890610139906001600160a01b031682565b6001600160a01b031690565b6100b890610125565b6100b890610145565b906101676100b86101129261014e565b8254610116565b61018f92916101816101889260006100fb565b60016100fb565b60026100fb565b61008033600361015756fe6080604052600436101561001257600080fd5b60003560e01c806302d05d3f146101125780630583e9f81461010d57806312ea5c7e146101085780631d0806ae146101035780632dcd52f2146100fe5780633f516018146100f957806353613dd3146100f457806355f804b3146100ef5780635eba096b146100ea5780636c0360eb146100e55780637284e416146100e0578063771282f6146100db57806390c3f38f146100d6578063ad64d068146100d1578063cf6a68bf146100cc5763d5abeb010361012257610782565b61075b565b610740565b6106cc565b6106b1565b61068a565b610657565b6104ac565b610471565b61036c565b610343565b6102fd565b6102e2565b6102b0565b61021a565b610175565b600091031261012257565b600080fd5b61013c916008021c5b6001600160a01b031690565b90565b9061013c9154610127565b61013c6000600361013f565b61015f90610130565b9052565b6020810192916101739190610156565b565b3461012257610185366004610117565b61019c61019061014a565b60405191829182610163565b0390f35b805b0361012257565b90503590610173826101a0565b906020828203126101225761013c916101a9565b61013c61013c61013c9290565b906101e1906101ca565b600052602052604060002090565b61013c916008021c81565b9061013c91546101ef565b600061021561013c9260066101d7565b6101fa565b346101225761019c6102356102303660046101b6565b610205565b6040519182918290815260200190565b0190565b90610269610262610258845190565b8084529260200190565b9260200190565b9060005b81811061027a5750505090565b9091926102976102906001928651815260200190565b9460200190565b92910161026d565b602080825261013c92910190610249565b34610122576102c0366004610117565b61019c6102cb610833565b6040519182918261029f565b61013c6000806101fa565b34610122576102f2366004610117565b61019c6102356102d7565b346101225761030d366004610117565b61019c61023560055490565b6101a281610130565b9050359061017382610319565b906020828203126101225761013c91610322565b346101225761035b61035636600461032f565b610936565b604051005b61013c600060026101fa565b346101225761037c366004610117565b61019c610235610360565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176103bf57604052565b610387565b906101736103d160405190565b928361039d565b67ffffffffffffffff81116103bf57602090601f01601f19160190565b90826000939282370152565b90929192610416610411826103d8565b6103c4565b9381855281830111610122576101739160208501906103f5565b9080601f830112156101225781602061013c93359101610401565b9060208282031261012257813567ffffffffffffffff81116101225761013c9201610430565b346101225761035b61048436600461044b565b610ae5565b91906040838203126101225761013c9060206104a582866101a9565b94016101a9565b346101225761019c6102cb6104c2366004610489565b90610bdb565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610514575b602083101461050f57565b6104de565b91607f1691610504565b8054600093929161053b610531836104f4565b8085529360200190565b916001811690811561058d575060011461055457505050565b6105679192939450600052602060002090565b916000925b8184106105795750500190565b80548484015260209093019260010161056c565b92949550505060ff1916825215156020020190565b9061013c9161051e565b906101736105c6926105bd60405190565b938480926105a2565b038361039d565b906000106105de5761013c906105ac565b6104c8565b61013c600060076105cd565b60005b8381106106025750506000910152565b81810151838201526020016105f2565b61063361063c60209361024593610627815190565b80835293849260200190565b958691016105ef565b601f01601f191690565b602080825261013c92910190610612565b3461012257610667366004610117565b61019c6106726105e3565b60405191829182610646565b61013c600060086105cd565b346101225761069a366004610117565b61019c61067261067e565b61013c600060046101fa565b34610122576106c1366004610117565b61019c6102356106a5565b346101225761035b6106df36600461044b565b610c89565b634e487b7160e01b600052603260045260246000fd5b805482101561071d57610714600191600052602060002090565b91020190600090565b6106e4565b6005548110156101225761073a61013c9160056106fa565b906101fa565b346101225761019c6102356107563660046101b6565b610722565b346101225761019c6102356107713660046101b6565b610c92565b61013c600060016101fa565b3461012257610792366004610117565b61019c610235610776565b61013c9081565b61013c905461079d565b906107c96107bd610258845490565b92600052602060002090565b9060005b8181106107da5750505090565b9091926107fe6107f76001926107ef876107a4565b815260200190565b9460010190565b9291016107cd565b9061013c916107ae565b906101736105c69261082160405190565b93848092610806565b61013c90610810565b61013c600561082a565b61013c90610130565b61013c905461083d565b1561085757565b60405162461bcd60e51b815260206004820152602360248201527f4f6e6c792063726561746f722063616e2063616c6c20746869732066756e637460448201526234b7b760e91b6064820152608490fd5b610173906108d06108c16108bc6003610846565b610130565b6108ca33610130565b14610850565b61092b565b906001600160a01b03905b9181191691161790565b61013c90610130906001600160a01b031682565b61013c906108ea565b61013c906108fe565b9061092061013c61092792610907565b82546108d5565b9055565b610173906003610910565b610173906108a8565b610173906109536108c16108bc6003610846565b610ada565b9160001960089290920291821b911b6108e0565b919061097d61013c610927936101ca565b908354610958565b6101739160009161096c565b81811061099c575050565b806109aa6000600193610985565b01610991565b9190601f81116109bf57505050565b6109d161017393600052602060002090565b906020601f8401819004830193106109f3575b6020601f909101040190610991565b90915081906109e4565b90610a06815190565b9067ffffffffffffffff82116103bf57610a2a82610a2485546104f4565b856109b0565b602090601f8311600114610a6557610927929160009183610a5a575b5050600019600883021c1916906002021790565b015190503880610a46565b601f19831691610a7a85600052602060002090565b9260005b818110610ab857509160029391856001969410610a9f575b50505002019055565b01516000196008601f8516021c19169055388080610a96565b91936020600181928787015181550195019201610a7e565b90610173916109fd565b610173906007610ad0565b6101739061093f565b15610af557565b60405162461bcd60e51b815260206004820152601960248201527f537461727420696e646578206f7574206f6620626f756e6473000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b91908201809211610b5d57565b610b3a565b91908203918211610b5d57565b67ffffffffffffffff81116103bf5760208091020190565b90610b9461041183610b6f565b918252565b369037565b90610173610bb4610bae84610b87565b93610b6f565b601f190160208401610b99565b90610bca825190565b81101561071d576020809102010190565b91610c08610c00600593610bfa610bf361013c875490565b8710610aee565b85610b50565b835490610ca9565b91610c1b610c168585610b62565b610b9e565b91845b845b811015610c6157610c5a81610c54610c3e61073a610c2095886106fa565b610c51610c4b8b85610b62565b89610bc1565b52565b60010190565b9050610c1e565b50935050905090565b61017390610c7e6108c16108bc6003610846565b610173906008610ad0565b61017390610c6a565b61073a61013c91610ca1600090565b5060056106fa565b9080821015610cb6575090565b90509056fea2646970667358221220cff58d22cd4dbf14291bbf83fa59d47727648141890692a2e3bfce4f9a18959964736f6c634300081c0033";

type StorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Storage__factory extends ContractFactory {
  constructor(...args: StorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _initialPrice: BigNumberish,
    _maxSupply: BigNumberish,
    _creatorFeePercent: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _initialPrice,
      _maxSupply,
      _creatorFeePercent,
      overrides || {}
    );
  }
  override deploy(
    _initialPrice: BigNumberish,
    _maxSupply: BigNumberish,
    _creatorFeePercent: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _initialPrice,
      _maxSupply,
      _creatorFeePercent,
      overrides || {}
    ) as Promise<
      Storage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Storage__factory {
    return super.connect(runner) as Storage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageInterface {
    return new Interface(_abi) as StorageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Storage {
    return new Contract(address, _abi, runner) as unknown as Storage;
  }
}
