/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FlipPeripheryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bulkBuy"
      | "bulkMint"
      | "bulkQuickBuy"
      | "bulkSell"
      | "buy"
      | "mint"
      | "onERC721Received"
      | "quickBuy"
      | "sell"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Bought"
      | "BulkBuyExecuted"
      | "BulkMintExecuted"
      | "BulkQuickBuyExecuted"
      | "BulkSellExecuted"
      | "Minted"
      | "QuickBuyExecuted"
      | "Sold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bulkBuy",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkQuickBuy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkSell",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quickBuy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bulkBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bulkMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkQuickBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bulkSell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quickBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
}

export namespace BoughtEvent {
  export type InputTuple = [
    flipContract: AddressLike,
    buyer: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    flipContract: string,
    buyer: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    flipContract: string;
    buyer: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BulkBuyExecutedEvent {
  export type InputTuple = [
    flipContract: AddressLike,
    buyer: AddressLike,
    tokenIds: BigNumberish[],
    totalPrice: BigNumberish
  ];
  export type OutputTuple = [
    flipContract: string,
    buyer: string,
    tokenIds: bigint[],
    totalPrice: bigint
  ];
  export interface OutputObject {
    flipContract: string;
    buyer: string;
    tokenIds: bigint[];
    totalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BulkMintExecutedEvent {
  export type InputTuple = [
    flipContract: AddressLike,
    buyer: AddressLike,
    quantity: BigNumberish,
    totalPrice: BigNumberish
  ];
  export type OutputTuple = [
    flipContract: string,
    buyer: string,
    quantity: bigint,
    totalPrice: bigint
  ];
  export interface OutputObject {
    flipContract: string;
    buyer: string;
    quantity: bigint;
    totalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BulkQuickBuyExecutedEvent {
  export type InputTuple = [
    flipContract: AddressLike,
    buyer: AddressLike,
    quantity: BigNumberish,
    totalPrice: BigNumberish
  ];
  export type OutputTuple = [
    flipContract: string,
    buyer: string,
    quantity: bigint,
    totalPrice: bigint
  ];
  export interface OutputObject {
    flipContract: string;
    buyer: string;
    quantity: bigint;
    totalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BulkSellExecutedEvent {
  export type InputTuple = [
    flipContract: AddressLike,
    seller: AddressLike,
    tokenIds: BigNumberish[],
    totalPrice: BigNumberish
  ];
  export type OutputTuple = [
    flipContract: string,
    seller: string,
    tokenIds: bigint[],
    totalPrice: bigint
  ];
  export interface OutputObject {
    flipContract: string;
    seller: string;
    tokenIds: bigint[];
    totalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedEvent {
  export type InputTuple = [
    flipContract: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    flipContract: string,
    to: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    flipContract: string;
    to: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuickBuyExecutedEvent {
  export type InputTuple = [
    flipContract: AddressLike,
    buyer: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    flipContract: string,
    buyer: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    flipContract: string;
    buyer: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SoldEvent {
  export type InputTuple = [
    flipContract: AddressLike,
    seller: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    flipContract: string,
    seller: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    flipContract: string;
    seller: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlipPeriphery extends BaseContract {
  connect(runner?: ContractRunner | null): FlipPeriphery;
  waitForDeployment(): Promise<this>;

  interface: FlipPeripheryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bulkBuy: TypedContractMethod<
    [_flipContractAddress: AddressLike, tokenIds: BigNumberish[]],
    [void],
    "payable"
  >;

  bulkMint: TypedContractMethod<
    [_flipContractAddress: AddressLike, quantity: BigNumberish],
    [void],
    "payable"
  >;

  bulkQuickBuy: TypedContractMethod<
    [_flipContractAddress: AddressLike, quantity: BigNumberish],
    [void],
    "payable"
  >;

  bulkSell: TypedContractMethod<
    [_flipContractAddress: AddressLike, tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  buy: TypedContractMethod<
    [_flipContractAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  mint: TypedContractMethod<
    [_flipContractAddress: AddressLike],
    [void],
    "payable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  quickBuy: TypedContractMethod<
    [_flipContractAddress: AddressLike],
    [void],
    "payable"
  >;

  sell: TypedContractMethod<
    [_flipContractAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bulkBuy"
  ): TypedContractMethod<
    [_flipContractAddress: AddressLike, tokenIds: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bulkMint"
  ): TypedContractMethod<
    [_flipContractAddress: AddressLike, quantity: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bulkQuickBuy"
  ): TypedContractMethod<
    [_flipContractAddress: AddressLike, quantity: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bulkSell"
  ): TypedContractMethod<
    [_flipContractAddress: AddressLike, tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [_flipContractAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_flipContractAddress: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quickBuy"
  ): TypedContractMethod<
    [_flipContractAddress: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [_flipContractAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Bought"
  ): TypedContractEvent<
    BoughtEvent.InputTuple,
    BoughtEvent.OutputTuple,
    BoughtEvent.OutputObject
  >;
  getEvent(
    key: "BulkBuyExecuted"
  ): TypedContractEvent<
    BulkBuyExecutedEvent.InputTuple,
    BulkBuyExecutedEvent.OutputTuple,
    BulkBuyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "BulkMintExecuted"
  ): TypedContractEvent<
    BulkMintExecutedEvent.InputTuple,
    BulkMintExecutedEvent.OutputTuple,
    BulkMintExecutedEvent.OutputObject
  >;
  getEvent(
    key: "BulkQuickBuyExecuted"
  ): TypedContractEvent<
    BulkQuickBuyExecutedEvent.InputTuple,
    BulkQuickBuyExecutedEvent.OutputTuple,
    BulkQuickBuyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "BulkSellExecuted"
  ): TypedContractEvent<
    BulkSellExecutedEvent.InputTuple,
    BulkSellExecutedEvent.OutputTuple,
    BulkSellExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Minted"
  ): TypedContractEvent<
    MintedEvent.InputTuple,
    MintedEvent.OutputTuple,
    MintedEvent.OutputObject
  >;
  getEvent(
    key: "QuickBuyExecuted"
  ): TypedContractEvent<
    QuickBuyExecutedEvent.InputTuple,
    QuickBuyExecutedEvent.OutputTuple,
    QuickBuyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Sold"
  ): TypedContractEvent<
    SoldEvent.InputTuple,
    SoldEvent.OutputTuple,
    SoldEvent.OutputObject
  >;

  filters: {
    "Bought(address,address,uint256,uint256)": TypedContractEvent<
      BoughtEvent.InputTuple,
      BoughtEvent.OutputTuple,
      BoughtEvent.OutputObject
    >;
    Bought: TypedContractEvent<
      BoughtEvent.InputTuple,
      BoughtEvent.OutputTuple,
      BoughtEvent.OutputObject
    >;

    "BulkBuyExecuted(address,address,uint256[],uint256)": TypedContractEvent<
      BulkBuyExecutedEvent.InputTuple,
      BulkBuyExecutedEvent.OutputTuple,
      BulkBuyExecutedEvent.OutputObject
    >;
    BulkBuyExecuted: TypedContractEvent<
      BulkBuyExecutedEvent.InputTuple,
      BulkBuyExecutedEvent.OutputTuple,
      BulkBuyExecutedEvent.OutputObject
    >;

    "BulkMintExecuted(address,address,uint256,uint256)": TypedContractEvent<
      BulkMintExecutedEvent.InputTuple,
      BulkMintExecutedEvent.OutputTuple,
      BulkMintExecutedEvent.OutputObject
    >;
    BulkMintExecuted: TypedContractEvent<
      BulkMintExecutedEvent.InputTuple,
      BulkMintExecutedEvent.OutputTuple,
      BulkMintExecutedEvent.OutputObject
    >;

    "BulkQuickBuyExecuted(address,address,uint256,uint256)": TypedContractEvent<
      BulkQuickBuyExecutedEvent.InputTuple,
      BulkQuickBuyExecutedEvent.OutputTuple,
      BulkQuickBuyExecutedEvent.OutputObject
    >;
    BulkQuickBuyExecuted: TypedContractEvent<
      BulkQuickBuyExecutedEvent.InputTuple,
      BulkQuickBuyExecutedEvent.OutputTuple,
      BulkQuickBuyExecutedEvent.OutputObject
    >;

    "BulkSellExecuted(address,address,uint256[],uint256)": TypedContractEvent<
      BulkSellExecutedEvent.InputTuple,
      BulkSellExecutedEvent.OutputTuple,
      BulkSellExecutedEvent.OutputObject
    >;
    BulkSellExecuted: TypedContractEvent<
      BulkSellExecutedEvent.InputTuple,
      BulkSellExecutedEvent.OutputTuple,
      BulkSellExecutedEvent.OutputObject
    >;

    "Minted(address,address,uint256,uint256)": TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;
    Minted: TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;

    "QuickBuyExecuted(address,address,uint256,uint256)": TypedContractEvent<
      QuickBuyExecutedEvent.InputTuple,
      QuickBuyExecutedEvent.OutputTuple,
      QuickBuyExecutedEvent.OutputObject
    >;
    QuickBuyExecuted: TypedContractEvent<
      QuickBuyExecutedEvent.InputTuple,
      QuickBuyExecutedEvent.OutputTuple,
      QuickBuyExecutedEvent.OutputObject
    >;

    "Sold(address,address,uint256,uint256)": TypedContractEvent<
      SoldEvent.InputTuple,
      SoldEvent.OutputTuple,
      SoldEvent.OutputObject
    >;
    Sold: TypedContractEvent<
      SoldEvent.InputTuple,
      SoldEvent.OutputTuple,
      SoldEvent.OutputObject
    >;
  };
}
