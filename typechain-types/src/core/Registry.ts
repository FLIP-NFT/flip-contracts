/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contractCreator"
      | "creatorContracts"
      | "getContractCreator"
      | "getCreatorContracts"
      | "register"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ContractRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "contractCreator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorContracts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractCreator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
}

export namespace ContractRegisteredEvent {
  export type InputTuple = [creator: AddressLike, contractAddress: AddressLike];
  export type OutputTuple = [creator: string, contractAddress: string];
  export interface OutputObject {
    creator: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Registry extends BaseContract {
  connect(runner?: ContractRunner | null): Registry;
  waitForDeployment(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contractCreator: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  creatorContracts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getContractCreator: TypedContractMethod<
    [contractAddress: AddressLike],
    [string],
    "view"
  >;

  getCreatorContracts: TypedContractMethod<
    [creator: AddressLike],
    [string[]],
    "view"
  >;

  register: TypedContractMethod<
    [creator: AddressLike, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contractCreator"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "creatorContracts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractCreator"
  ): TypedContractMethod<[contractAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getCreatorContracts"
  ): TypedContractMethod<[creator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [creator: AddressLike, contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContractRegistered"
  ): TypedContractEvent<
    ContractRegisteredEvent.InputTuple,
    ContractRegisteredEvent.OutputTuple,
    ContractRegisteredEvent.OutputObject
  >;

  filters: {
    "ContractRegistered(address,address)": TypedContractEvent<
      ContractRegisteredEvent.InputTuple,
      ContractRegisteredEvent.OutputTuple,
      ContractRegisteredEvent.OutputObject
    >;
    ContractRegistered: TypedContractEvent<
      ContractRegisteredEvent.InputTuple,
      ContractRegisteredEvent.OutputTuple,
      ContractRegisteredEvent.OutputObject
    >;
  };
}
