/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface StorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "availableTokens"
      | "baseURI"
      | "creator"
      | "creatorFeePercent"
      | "currentSupply"
      | "getAllAvailableTokens"
      | "getAvailableTokenByIndex"
      | "getAvailableTokensCount"
      | "getAvailableTokensPaginated"
      | "initialPrice"
      | "maxSupply"
      | "setBaseURI"
      | "setCreator"
      | "tokenIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availableTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "creatorFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAvailableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTokensCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTokensPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCreator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndex",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAvailableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTokensCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTokensPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIndex", data: BytesLike): Result;
}

export interface Storage extends BaseContract {
  connect(runner?: ContractRunner | null): Storage;
  waitForDeployment(): Promise<this>;

  interface: StorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  availableTokens: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  baseURI: TypedContractMethod<[], [string], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  creatorFeePercent: TypedContractMethod<[], [bigint], "view">;

  currentSupply: TypedContractMethod<[], [bigint], "view">;

  getAllAvailableTokens: TypedContractMethod<[], [bigint[]], "view">;

  getAvailableTokenByIndex: TypedContractMethod<
    [index: BigNumberish],
    [bigint],
    "view"
  >;

  getAvailableTokensCount: TypedContractMethod<[], [bigint], "view">;

  getAvailableTokensPaginated: TypedContractMethod<
    [start: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  initialPrice: TypedContractMethod<[], [bigint], "view">;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  setBaseURI: TypedContractMethod<[_baseURI: string], [void], "nonpayable">;

  setCreator: TypedContractMethod<
    [_creator: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenIndex: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "availableTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creatorFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllAvailableTokens"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAvailableTokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAvailableTokensCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAvailableTokensPaginated"
  ): TypedContractMethod<
    [start: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[_baseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCreator"
  ): TypedContractMethod<[_creator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  filters: {};
}
